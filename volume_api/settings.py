"""
Django settings for volume_api project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-#pl5b(m25!@c_v8o6b5r1eens^wj%7ik%(n6t8bicks06=nb&a"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# The port here used is the exposed geoserver container URL at http://geoserver:8080,
GEOSERVER_URL = os.environ.get("GEOSERVER_URL")
GEOSERVER_USERNAME = os.environ.get("GEOSERVER_USER")
GEOSERVER_PASSWORD = os.environ.get("GEOSERVER_PASSWORD")

GEOSERVER_PSQL_PASSWORD = os.environ.get("GEOSERVER_PSQL_PASSWORD")
GEOSERVER_PSQL_USER = os.environ.get("GEOSERVER_PSQL_USER")
GEOSERVER_SHAPEFILES_PSQL_DB = os.environ.get("GEOSERVER_SHAPEFILES_PSQL_DB")

GEOSERVER_SHAPEFILES_STORE_NAME = os.environ.get("GEOSERVER_SHAPEFILES_STORE_NAME")
GEOSERVER_SHAPEFILES_WORKSPACE = os.environ.get("GEOSERVER_SHAPEFILES_WORKSPACE")

GEOSERVER_XYZFILE_WORKSPACE = os.environ.get("GEOSERVER_XYZFILE_WORKSPACE")

GEOSERVER_GEOTIFF_WORKSPACE = os.environ.get("GEOSERVER_GEOTIFF_WORKSPACE")
GEOSERVER_DEM_WORKSPACE = os.environ.get("GEOSERVER_DEM_WORKSPACE")
GEOSERVER_NETCDF_WORKSPACE = os.environ.get("GEOSERVER_NETCDF_WORKSPACE")

# Application definition

INSTALLED_APPS = [
    "corsheaders",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "drf_yasg",
    "volume_api_app.apps.VolumeApiAppConfig",
]


MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

CORS_ALLOW_ALL_ORIGINS = True


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
    },
    "loggers": {
        "admin_tools_logger": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        "unit_test_logger": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        "debug_logger": {
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": False,
        },
        "osm_logger": {
            "handlers": ["console"],
            "level": "ERROR",
            "propagate": False,
        },
        "__main__": {  # Ensure the logger for the main module is set up
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": True,
        },
    },
}


DEFAULT_ADMIN_USERNAME = "admin"
DEFAULT_ADMIN_EMAIL = "admin@example.com"
DEFAULT_ADMIN_PASSWORD = "admin"

ROOT_URLCONF = "volume_api.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "volume_api.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

POSTGRES_SERVER = os.environ.get("POSTGRES_SERVER")
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("PSQL_DB"),
        "USER": os.environ.get("PSQL_USER"),
        "PASSWORD": os.environ.get("PSQL_PASSWORD"),
        "HOST": POSTGRES_SERVER,
        "PORT": 5432,
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
